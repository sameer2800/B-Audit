#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Variant(object):
    """
    Attributes:
     - v_null
     - v_boolean
     - v_boolean_box
     - v_byte
     - v_byte_box
     - v_short
     - v_short_box
     - v_int
     - v_int_box
     - v_long
     - v_long_box
     - v_float
     - v_float_box
     - v_double
     - v_double_box
     - v_string
     - v_list
     - v_set
     - v_map
     - v_array

    """


    def __init__(self, v_null=None, v_boolean=None, v_boolean_box=None, v_byte=None, v_byte_box=None, v_short=None, v_short_box=None, v_int=None, v_int_box=None, v_long=None, v_long_box=None, v_float=None, v_float_box=None, v_double=None, v_double_box=None, v_string=None, v_list=None, v_set=None, v_map=None, v_array=None,):
        self.v_null = v_null
        self.v_boolean = v_boolean
        self.v_boolean_box = v_boolean_box
        self.v_byte = v_byte
        self.v_byte_box = v_byte_box
        self.v_short = v_short
        self.v_short_box = v_short_box
        self.v_int = v_int
        self.v_int_box = v_int_box
        self.v_long = v_long
        self.v_long_box = v_long_box
        self.v_float = v_float
        self.v_float_box = v_float_box
        self.v_double = v_double
        self.v_double_box = v_double_box
        self.v_string = v_string
        self.v_list = v_list
        self.v_set = v_set
        self.v_map = v_map
        self.v_array = v_array

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.v_null = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.v_boolean = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.v_boolean_box = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.v_byte = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.v_byte_box = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.v_short = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.v_short_box = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.v_int = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.v_int_box = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.v_long = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.v_long_box = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.v_float = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.v_float_box = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.v_double = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.v_double_box = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.v_string = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.v_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Variant()
                        _elem5.read(iprot)
                        self.v_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.SET:
                    self.v_set = set()
                    (_etype9, _size6) = iprot.readSetBegin()
                    for _i10 in range(_size6):
                        _elem11 = Variant()
                        _elem11.read(iprot)
                        self.v_set.add(_elem11)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.MAP:
                    self.v_map = {}
                    (_ktype13, _vtype14, _size12) = iprot.readMapBegin()
                    for _i16 in range(_size12):
                        _key17 = Variant()
                        _key17.read(iprot)
                        _val18 = Variant()
                        _val18.read(iprot)
                        self.v_map[_key17] = _val18
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.v_array = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = Variant()
                        _elem24.read(iprot)
                        self.v_array.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Variant')
        if self.v_null is not None:
            oprot.writeFieldBegin('v_null', TType.BYTE, 1)
            oprot.writeByte(self.v_null)
            oprot.writeFieldEnd()
        if self.v_boolean is not None:
            oprot.writeFieldBegin('v_boolean', TType.BOOL, 2)
            oprot.writeBool(self.v_boolean)
            oprot.writeFieldEnd()
        if self.v_boolean_box is not None:
            oprot.writeFieldBegin('v_boolean_box', TType.BOOL, 3)
            oprot.writeBool(self.v_boolean_box)
            oprot.writeFieldEnd()
        if self.v_byte is not None:
            oprot.writeFieldBegin('v_byte', TType.BYTE, 4)
            oprot.writeByte(self.v_byte)
            oprot.writeFieldEnd()
        if self.v_byte_box is not None:
            oprot.writeFieldBegin('v_byte_box', TType.BYTE, 5)
            oprot.writeByte(self.v_byte_box)
            oprot.writeFieldEnd()
        if self.v_short is not None:
            oprot.writeFieldBegin('v_short', TType.I16, 6)
            oprot.writeI16(self.v_short)
            oprot.writeFieldEnd()
        if self.v_short_box is not None:
            oprot.writeFieldBegin('v_short_box', TType.I16, 7)
            oprot.writeI16(self.v_short_box)
            oprot.writeFieldEnd()
        if self.v_int is not None:
            oprot.writeFieldBegin('v_int', TType.I32, 8)
            oprot.writeI32(self.v_int)
            oprot.writeFieldEnd()
        if self.v_int_box is not None:
            oprot.writeFieldBegin('v_int_box', TType.I32, 9)
            oprot.writeI32(self.v_int_box)
            oprot.writeFieldEnd()
        if self.v_long is not None:
            oprot.writeFieldBegin('v_long', TType.I64, 10)
            oprot.writeI64(self.v_long)
            oprot.writeFieldEnd()
        if self.v_long_box is not None:
            oprot.writeFieldBegin('v_long_box', TType.I64, 11)
            oprot.writeI64(self.v_long_box)
            oprot.writeFieldEnd()
        if self.v_float is not None:
            oprot.writeFieldBegin('v_float', TType.DOUBLE, 12)
            oprot.writeDouble(self.v_float)
            oprot.writeFieldEnd()
        if self.v_float_box is not None:
            oprot.writeFieldBegin('v_float_box', TType.DOUBLE, 13)
            oprot.writeDouble(self.v_float_box)
            oprot.writeFieldEnd()
        if self.v_double is not None:
            oprot.writeFieldBegin('v_double', TType.DOUBLE, 14)
            oprot.writeDouble(self.v_double)
            oprot.writeFieldEnd()
        if self.v_double_box is not None:
            oprot.writeFieldBegin('v_double_box', TType.DOUBLE, 15)
            oprot.writeDouble(self.v_double_box)
            oprot.writeFieldEnd()
        if self.v_string is not None:
            oprot.writeFieldBegin('v_string', TType.STRING, 16)
            oprot.writeString(self.v_string.encode('utf-8') if sys.version_info[0] == 2 else self.v_string)
            oprot.writeFieldEnd()
        if self.v_list is not None:
            oprot.writeFieldBegin('v_list', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.v_list))
            for iter25 in self.v_list:
                iter25.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.v_set is not None:
            oprot.writeFieldBegin('v_set', TType.SET, 18)
            oprot.writeSetBegin(TType.STRUCT, len(self.v_set))
            for iter26 in self.v_set:
                iter26.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.v_map is not None:
            oprot.writeFieldBegin('v_map', TType.MAP, 19)
            oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.v_map))
            for kiter27, viter28 in self.v_map.items():
                kiter27.write(oprot)
                viter28.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.v_array is not None:
            oprot.writeFieldBegin('v_array', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.v_array))
            for iter29 in self.v_array:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MethodArgument(object):
    """
    Attributes:
     - type
     - name

    """


    def __init__(self, type=None, name=None,):
        self.type = type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MethodArgument')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MethodDescription(object):
    """
    Attributes:
     - returnType
     - name
     - arguments

    """


    def __init__(self, returnType=None, name=None, arguments=None,):
        self.returnType = returnType
        self.name = name
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.returnType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = MethodArgument()
                        _elem35.read(iprot)
                        self.arguments.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MethodDescription')
        if self.returnType is not None:
            oprot.writeFieldBegin('returnType', TType.STRING, 1)
            oprot.writeString(self.returnType.encode('utf-8') if sys.version_info[0] == 2 else self.returnType)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.arguments))
            for iter36 in self.arguments:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ByteCodeObject(object):
    """
    Attributes:
     - name
     - byteCode

    """


    def __init__(self, name=None, byteCode=None,):
        self.name = name
        self.byteCode = byteCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.byteCode = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ByteCodeObject')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.byteCode is not None:
            oprot.writeFieldBegin('byteCode', TType.STRING, 2)
            oprot.writeBinary(self.byteCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class APIResponse(object):
    """
    Attributes:
     - code
     - message

    """


    def __init__(self, code=None, message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('APIResponse')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 1)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Variant)
Variant.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'v_null', None, None, ),  # 1
    (2, TType.BOOL, 'v_boolean', None, None, ),  # 2
    (3, TType.BOOL, 'v_boolean_box', None, None, ),  # 3
    (4, TType.BYTE, 'v_byte', None, None, ),  # 4
    (5, TType.BYTE, 'v_byte_box', None, None, ),  # 5
    (6, TType.I16, 'v_short', None, None, ),  # 6
    (7, TType.I16, 'v_short_box', None, None, ),  # 7
    (8, TType.I32, 'v_int', None, None, ),  # 8
    (9, TType.I32, 'v_int_box', None, None, ),  # 9
    (10, TType.I64, 'v_long', None, None, ),  # 10
    (11, TType.I64, 'v_long_box', None, None, ),  # 11
    (12, TType.DOUBLE, 'v_float', None, None, ),  # 12
    (13, TType.DOUBLE, 'v_float_box', None, None, ),  # 13
    (14, TType.DOUBLE, 'v_double', None, None, ),  # 14
    (15, TType.DOUBLE, 'v_double_box', None, None, ),  # 15
    (16, TType.STRING, 'v_string', 'UTF8', None, ),  # 16
    (17, TType.LIST, 'v_list', (TType.STRUCT, [Variant, None], False), None, ),  # 17
    (18, TType.SET, 'v_set', (TType.STRUCT, [Variant, None], False), None, ),  # 18
    (19, TType.MAP, 'v_map', (TType.STRUCT, [Variant, None], TType.STRUCT, [Variant, None], False), None, ),  # 19
    (20, TType.LIST, 'v_array', (TType.STRUCT, [Variant, None], False), None, ),  # 20
)
all_structs.append(MethodArgument)
MethodArgument.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(MethodDescription)
MethodDescription.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'returnType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'arguments', (TType.STRUCT, [MethodArgument, None], False), None, ),  # 3
)
all_structs.append(ByteCodeObject)
ByteCodeObject.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'byteCode', 'BINARY', None, ),  # 2
)
all_structs.append(APIResponse)
APIResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
