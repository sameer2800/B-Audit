#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import general.ttypes

from thrift.transport import TTransport
all_structs = []


class TransactionState(object):
    INVALID = 0
    VALID = 1
    INPROGRESS = 2

    _VALUES_TO_NAMES = {
        0: "INVALID",
        1: "VALID",
        2: "INPROGRESS",
    }

    _NAMES_TO_VALUES = {
        "INVALID": 0,
        "VALID": 1,
        "INPROGRESS": 2,
    }


class TokenStandart(object):
    NotAToken = 0
    CreditsBasic = 1
    CreditsExtended = 2

    _VALUES_TO_NAMES = {
        0: "NotAToken",
        1: "CreditsBasic",
        2: "CreditsExtended",
    }

    _NAMES_TO_VALUES = {
        "NotAToken": 0,
        "CreditsBasic": 1,
        "CreditsExtended": 2,
    }


class TokensListSortField(object):
    TL_Code = 0
    TL_Name = 1
    TL_Address = 2
    TL_TotalSupply = 3
    TL_HoldersCount = 4
    TL_TransfersCount = 5
    TL_TransactionsCount = 6

    _VALUES_TO_NAMES = {
        0: "TL_Code",
        1: "TL_Name",
        2: "TL_Address",
        3: "TL_TotalSupply",
        4: "TL_HoldersCount",
        5: "TL_TransfersCount",
        6: "TL_TransactionsCount",
    }

    _NAMES_TO_VALUES = {
        "TL_Code": 0,
        "TL_Name": 1,
        "TL_Address": 2,
        "TL_TotalSupply": 3,
        "TL_HoldersCount": 4,
        "TL_TransfersCount": 5,
        "TL_TransactionsCount": 6,
    }


class TokenHoldersSortField(object):
    TH_Balance = 0
    TH_TransfersCount = 1

    _VALUES_TO_NAMES = {
        0: "TH_Balance",
        1: "TH_TransfersCount",
    }

    _NAMES_TO_VALUES = {
        "TH_Balance": 0,
        "TH_TransfersCount": 1,
    }


class Amount(object):
    """
    Attributes:
     - integral
     - fraction

    """


    def __init__(self, integral=0, fraction=0,):
        self.integral = integral
        self.fraction = fraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.integral = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fraction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Amount')
        if self.integral is not None:
            oprot.writeFieldBegin('integral', TType.I32, 1)
            oprot.writeI32(self.integral)
            oprot.writeFieldEnd()
        if self.fraction is not None:
            oprot.writeFieldBegin('fraction', TType.I64, 2)
            oprot.writeI64(self.fraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.integral is None:
            raise TProtocolException(message='Required field integral is unset!')
        if self.fraction is None:
            raise TProtocolException(message='Required field fraction is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AmountCommission(object):
    """
    Attributes:
     - commission

    """


    def __init__(self, commission=0,):
        self.commission = commission

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.commission = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AmountCommission')
        if self.commission is not None:
            oprot.writeFieldBegin('commission', TType.I16, 1)
            oprot.writeI16(self.commission)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.commission is None:
            raise TProtocolException(message='Required field commission is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CumulativeAmount(object):
    """
    Attributes:
     - integral
     - fraction

    """


    def __init__(self, integral=0, fraction=0,):
        self.integral = integral
        self.fraction = fraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.integral = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fraction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CumulativeAmount')
        if self.integral is not None:
            oprot.writeFieldBegin('integral', TType.I64, 1)
            oprot.writeI64(self.integral)
            oprot.writeFieldEnd()
        if self.fraction is not None:
            oprot.writeFieldBegin('fraction', TType.I64, 2)
            oprot.writeI64(self.fraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.integral is None:
            raise TProtocolException(message='Required field integral is unset!')
        if self.fraction is None:
            raise TProtocolException(message='Required field fraction is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractDeploy(object):
    """
    Attributes:
     - sourceCode
     - byteCodeObjects
     - hashState
     - tokenStandart

    """


    def __init__(self, sourceCode=None, byteCodeObjects=None, hashState=None, tokenStandart=None,):
        self.sourceCode = sourceCode
        self.byteCodeObjects = byteCodeObjects
        self.hashState = hashState
        self.tokenStandart = tokenStandart

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = general.ttypes.ByteCodeObject()
                        _elem5.read(iprot)
                        self.byteCodeObjects.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hashState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tokenStandart = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractDeploy')
        if self.sourceCode is not None:
            oprot.writeFieldBegin('sourceCode', TType.STRING, 1)
            oprot.writeString(self.sourceCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceCode)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter6 in self.byteCodeObjects:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hashState is not None:
            oprot.writeFieldBegin('hashState', TType.STRING, 3)
            oprot.writeString(self.hashState.encode('utf-8') if sys.version_info[0] == 2 else self.hashState)
            oprot.writeFieldEnd()
        if self.tokenStandart is not None:
            oprot.writeFieldBegin('tokenStandart', TType.I32, 4)
            oprot.writeI32(self.tokenStandart)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContract(object):
    """
    Attributes:
     - address
     - deployer
     - smartContractDeploy
     - objectState
     - createTime
     - transactionsCount

    """


    def __init__(self, address=None, deployer=None, smartContractDeploy=None, objectState=None, createTime=None, transactionsCount=None,):
        self.address = address
        self.deployer = deployer
        self.smartContractDeploy = smartContractDeploy
        self.objectState = objectState
        self.createTime = createTime
        self.transactionsCount = transactionsCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deployer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.smartContractDeploy = SmartContractDeploy()
                    self.smartContractDeploy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.objectState = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContract')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.deployer is not None:
            oprot.writeFieldBegin('deployer', TType.STRING, 2)
            oprot.writeBinary(self.deployer)
            oprot.writeFieldEnd()
        if self.smartContractDeploy is not None:
            oprot.writeFieldBegin('smartContractDeploy', TType.STRUCT, 3)
            self.smartContractDeploy.write(oprot)
            oprot.writeFieldEnd()
        if self.objectState is not None:
            oprot.writeFieldBegin('objectState', TType.STRING, 4)
            oprot.writeBinary(self.objectState)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 5)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 6)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.address is None:
            raise TProtocolException(message='Required field address is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractInvocation(object):
    """
    Attributes:
     - method
     - params
     - forgetNewState
     - smartContractDeploy

    """


    def __init__(self, method=None, params=None, forgetNewState=None, smartContractDeploy=None,):
        self.method = method
        self.params = params
        self.forgetNewState = forgetNewState
        self.smartContractDeploy = smartContractDeploy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = general.ttypes.Variant()
                        _elem12.read(iprot)
                        self.params.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.forgetNewState = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.smartContractDeploy = SmartContractDeploy()
                    self.smartContractDeploy.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractInvocation')
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 1)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter13 in self.params:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.forgetNewState is not None:
            oprot.writeFieldBegin('forgetNewState', TType.BOOL, 3)
            oprot.writeBool(self.forgetNewState)
            oprot.writeFieldEnd()
        if self.smartContractDeploy is not None:
            oprot.writeFieldBegin('smartContractDeploy', TType.STRUCT, 4)
            self.smartContractDeploy.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionId(object):
    """
    Attributes:
     - poolHash
     - index

    """


    def __init__(self, poolHash=None, index=None,):
        self.poolHash = poolHash
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionId')
        if self.poolHash is not None:
            oprot.writeFieldBegin('poolHash', TType.STRING, 1)
            oprot.writeBinary(self.poolHash)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 2)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transaction(object):
    """
    Attributes:
     - id
     - source
     - target
     - amount
     - balance
     - currency
     - signature
     - smartContract
     - fee
     - timeCreation
     - userFields

    """


    def __init__(self, id=None, source=None, target=None, amount=None, balance=None, currency=None, signature=None, smartContract=None, fee=None, timeCreation=None, userFields=None,):
        self.id = id
        self.source = source
        self.target = target
        self.amount = amount
        self.balance = balance
        self.currency = currency
        self.signature = signature
        self.smartContract = smartContract
        self.fee = fee
        self.timeCreation = timeCreation
        self.userFields = userFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.target = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.amount = Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.currency = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.signature = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.smartContract = SmartContractInvocation()
                    self.smartContract.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.fee = AmountCommission()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.timeCreation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userFields = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 2)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.STRING, 3)
            oprot.writeBinary(self.target)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 4)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 5)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.BYTE, 6)
            oprot.writeByte(self.currency)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 7)
            oprot.writeBinary(self.signature)
            oprot.writeFieldEnd()
        if self.smartContract is not None:
            oprot.writeFieldBegin('smartContract', TType.STRUCT, 8)
            self.smartContract.write(oprot)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 9)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        if self.timeCreation is not None:
            oprot.writeFieldBegin('timeCreation', TType.I64, 10)
            oprot.writeI64(self.timeCreation)
            oprot.writeFieldEnd()
        if self.userFields is not None:
            oprot.writeFieldBegin('userFields', TType.STRING, 11)
            oprot.writeBinary(self.userFields)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SealedTransaction(object):
    """
    Attributes:
     - id
     - trxn

    """


    def __init__(self, id=None, trxn=None,):
        self.id = id
        self.trxn = trxn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.id = TransactionId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.trxn = Transaction()
                    self.trxn.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SealedTransaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 1)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.trxn is not None:
            oprot.writeFieldBegin('trxn', TType.STRUCT, 2)
            self.trxn.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Pool(object):
    """
    Attributes:
     - hash
     - prevHash
     - time
     - transactionsCount
     - poolNumber
     - writer
     - totalFee

    """


    def __init__(self, hash=None, prevHash=None, time=None, transactionsCount=None, poolNumber=None, writer=None, totalFee=None,):
        self.hash = hash
        self.prevHash = prevHash
        self.time = time
        self.transactionsCount = transactionsCount
        self.poolNumber = poolNumber
        self.writer = writer
        self.totalFee = totalFee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prevHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.poolNumber = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.writer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.totalFee = Amount()
                    self.totalFee.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Pool')
        if self.hash is not None:
            oprot.writeFieldBegin('hash', TType.STRING, 1)
            oprot.writeBinary(self.hash)
            oprot.writeFieldEnd()
        if self.prevHash is not None:
            oprot.writeFieldBegin('prevHash', TType.STRING, 2)
            oprot.writeBinary(self.prevHash)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 3)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 4)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.poolNumber is not None:
            oprot.writeFieldBegin('poolNumber', TType.I64, 5)
            oprot.writeI64(self.poolNumber)
            oprot.writeFieldEnd()
        if self.writer is not None:
            oprot.writeFieldBegin('writer', TType.STRING, 6)
            oprot.writeBinary(self.writer)
            oprot.writeFieldEnd()
        if self.totalFee is not None:
            oprot.writeFieldBegin('totalFee', TType.STRUCT, 7)
            self.totalFee.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletData(object):
    """
    Attributes:
     - walletId
     - balance
     - lastTransactionId

    """


    def __init__(self, walletId=None, balance=None, lastTransactionId=None,):
        self.walletId = walletId
        self.balance = balance
        self.lastTransactionId = lastTransactionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.walletId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastTransactionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletData')
        if self.walletId is not None:
            oprot.writeFieldBegin('walletId', TType.I32, 1)
            oprot.writeI32(self.walletId)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.lastTransactionId is not None:
            oprot.writeFieldBegin('lastTransactionId', TType.I64, 3)
            oprot.writeI64(self.lastTransactionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PeriodStats(object):
    """
    Attributes:
     - periodDuration
     - poolsCount
     - transactionsCount
     - balancePerCurrency
     - smartContractsCount
     - transactionsSmartCount

    """


    def __init__(self, periodDuration=None, poolsCount=None, transactionsCount=None, balancePerCurrency=None, smartContractsCount=None, transactionsSmartCount=None,):
        self.periodDuration = periodDuration
        self.poolsCount = poolsCount
        self.transactionsCount = transactionsCount
        self.balancePerCurrency = balancePerCurrency
        self.smartContractsCount = smartContractsCount
        self.transactionsSmartCount = transactionsSmartCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.periodDuration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.poolsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.balancePerCurrency = {}
                    (_ktype15, _vtype16, _size14) = iprot.readMapBegin()
                    for _i18 in range(_size14):
                        _key19 = iprot.readByte()
                        _val20 = CumulativeAmount()
                        _val20.read(iprot)
                        self.balancePerCurrency[_key19] = _val20
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.smartContractsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transactionsSmartCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PeriodStats')
        if self.periodDuration is not None:
            oprot.writeFieldBegin('periodDuration', TType.I64, 1)
            oprot.writeI64(self.periodDuration)
            oprot.writeFieldEnd()
        if self.poolsCount is not None:
            oprot.writeFieldBegin('poolsCount', TType.I32, 2)
            oprot.writeI32(self.poolsCount)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 3)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.balancePerCurrency is not None:
            oprot.writeFieldBegin('balancePerCurrency', TType.MAP, 4)
            oprot.writeMapBegin(TType.BYTE, TType.STRUCT, len(self.balancePerCurrency))
            for kiter21, viter22 in self.balancePerCurrency.items():
                oprot.writeByte(kiter21)
                viter22.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.smartContractsCount is not None:
            oprot.writeFieldBegin('smartContractsCount', TType.I32, 5)
            oprot.writeI32(self.smartContractsCount)
            oprot.writeFieldEnd()
        if self.transactionsSmartCount is not None:
            oprot.writeFieldBegin('transactionsSmartCount', TType.I32, 6)
            oprot.writeI32(self.transactionsSmartCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletDataGetResult(object):
    """
    Attributes:
     - status
     - walletData

    """


    def __init__(self, status=None, walletData=None,):
        self.status = status
        self.walletData = walletData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.walletData = WalletData()
                    self.walletData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletDataGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.walletData is not None:
            oprot.writeFieldBegin('walletData', TType.STRUCT, 2)
            self.walletData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletIdGetResult(object):
    """
    Attributes:
     - status
     - walletId

    """


    def __init__(self, status=None, walletId=None,):
        self.status = status
        self.walletId = walletId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.walletId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletIdGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.walletId is not None:
            oprot.writeFieldBegin('walletId', TType.I32, 2)
            oprot.writeI32(self.walletId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletTransactionsCountGetResult(object):
    """
    Attributes:
     - status
     - lastTransactionInnerId

    """


    def __init__(self, status=None, lastTransactionInnerId=None,):
        self.status = status
        self.lastTransactionInnerId = lastTransactionInnerId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastTransactionInnerId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletTransactionsCountGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.lastTransactionInnerId is not None:
            oprot.writeFieldBegin('lastTransactionInnerId', TType.I64, 2)
            oprot.writeI64(self.lastTransactionInnerId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletBalanceGetResult(object):
    """
    Attributes:
     - status
     - balance

    """


    def __init__(self, status=None, balance=None,):
        self.status = status
        self.balance = balance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletBalanceGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionGetResult(object):
    """
    Attributes:
     - status
     - found
     - state
     - roundNum
     - transaction

    """


    def __init__(self, status=None, found=None, state=None, roundNum=None, transaction=None,):
        self.status = status
        self.found = found
        self.state = state
        self.roundNum = roundNum
        self.transaction = transaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.found = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.roundNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.transaction = SealedTransaction()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.found is not None:
            oprot.writeFieldBegin('found', TType.BOOL, 2)
            oprot.writeBool(self.found)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.roundNum is not None:
            oprot.writeFieldBegin('roundNum', TType.I32, 4)
            oprot.writeI32(self.roundNum)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrxnsCountFromAddr(object):
    """
    Attributes:
     - sendCount
     - recvCount

    """


    def __init__(self, sendCount=None, recvCount=None,):
        self.sendCount = sendCount
        self.recvCount = recvCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.sendCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.recvCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrxnsCountFromAddr')
        if self.sendCount is not None:
            oprot.writeFieldBegin('sendCount', TType.I64, 1)
            oprot.writeI64(self.sendCount)
            oprot.writeFieldEnd()
        if self.recvCount is not None:
            oprot.writeFieldBegin('recvCount', TType.I64, 2)
            oprot.writeI64(self.recvCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionsGetResult(object):
    """
    Attributes:
     - status
     - result
     - total_trxns_count
     - transactions
     - trxns_count

    """


    def __init__(self, status=None, result=None, total_trxns_count=None, transactions=None, trxns_count=None,):
        self.status = status
        self.result = result
        self.total_trxns_count = total_trxns_count
        self.transactions = transactions
        self.trxns_count = trxns_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total_trxns_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = SealedTransaction()
                        _elem28.read(iprot)
                        self.transactions.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.trxns_count = TrxnsCountFromAddr()
                    self.trxns_count.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.total_trxns_count is not None:
            oprot.writeFieldBegin('total_trxns_count', TType.I32, 3)
            oprot.writeI32(self.total_trxns_count)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter29 in self.transactions:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.trxns_count is not None:
            oprot.writeFieldBegin('trxns_count', TType.STRUCT, 5)
            self.trxns_count.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionFlowResult(object):
    """
    Attributes:
     - status
     - smart_contract_result
     - roundNum

    """


    def __init__(self, status=None, smart_contract_result=None, roundNum=None,):
        self.status = status
        self.smart_contract_result = smart_contract_result
        self.roundNum = roundNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.smart_contract_result = general.ttypes.Variant()
                    self.smart_contract_result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.roundNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionFlowResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smart_contract_result is not None:
            oprot.writeFieldBegin('smart_contract_result', TType.STRUCT, 2)
            self.smart_contract_result.write(oprot)
            oprot.writeFieldEnd()
        if self.roundNum is not None:
            oprot.writeFieldBegin('roundNum', TType.I32, 3)
            oprot.writeI32(self.roundNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolListGetResult(object):
    """
    Attributes:
     - status
     - result
     - count
     - pools

    """


    def __init__(self, status=None, result=None, count=None, pools=None,):
        self.status = status
        self.result = result
        self.count = count
        self.pools = pools

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.pools = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = Pool()
                        _elem35.read(iprot)
                        self.pools.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.pools is not None:
            oprot.writeFieldBegin('pools', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.pools))
            for iter36 in self.pools:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolInfoGetResult(object):
    """
    Attributes:
     - status
     - isFound
     - pool

    """


    def __init__(self, status=None, isFound=None, pool=None,):
        self.status = status
        self.isFound = isFound
        self.pool = pool

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFound = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.pool = Pool()
                    self.pool.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolInfoGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.isFound is not None:
            oprot.writeFieldBegin('isFound', TType.BOOL, 2)
            oprot.writeBool(self.isFound)
            oprot.writeFieldEnd()
        if self.pool is not None:
            oprot.writeFieldBegin('pool', TType.STRUCT, 3)
            self.pool.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolTransactionsGetResult(object):
    """
    Attributes:
     - status
     - transactions

    """


    def __init__(self, status=None, transactions=None,):
        self.status = status
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = SealedTransaction()
                        _elem42.read(iprot)
                        self.transactions.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolTransactionsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter43 in self.transactions:
                iter43.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StatsGetResult(object):
    """
    Attributes:
     - status
     - stats

    """


    def __init__(self, status=None, stats=None,):
        self.status = status
        self.stats = stats

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.stats = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = PeriodStats()
                        _elem49.read(iprot)
                        self.stats.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StatsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.stats is not None:
            oprot.writeFieldBegin('stats', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.stats))
            for iter50 in self.stats:
                iter50.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractGetResult(object):
    """
    Attributes:
     - status
     - smartContract

    """


    def __init__(self, status=None, smartContract=None,):
        self.status = status
        self.smartContract = smartContract

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.smartContract = SmartContract()
                    self.smartContract.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smartContract is not None:
            oprot.writeFieldBegin('smartContract', TType.STRUCT, 2)
            self.smartContract.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractAddressesListGetResult(object):
    """
    Attributes:
     - status
     - addressesList

    """


    def __init__(self, status=None, addressesList=None,):
        self.status = status
        self.addressesList = addressesList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.addressesList = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = iprot.readBinary()
                        self.addressesList.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractAddressesListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.addressesList is not None:
            oprot.writeFieldBegin('addressesList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.addressesList))
            for iter57 in self.addressesList:
                oprot.writeBinary(iter57)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractsListGetResult(object):
    """
    Attributes:
     - status
     - count
     - smartContractsList

    """


    def __init__(self, status=None, count=None, smartContractsList=None,):
        self.status = status
        self.count = count
        self.smartContractsList = smartContractsList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.smartContractsList = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = SmartContract()
                        _elem63.read(iprot)
                        self.smartContractsList.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractsListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.smartContractsList is not None:
            oprot.writeFieldBegin('smartContractsList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.smartContractsList))
            for iter64 in self.smartContractsList:
                iter64.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionsStateGetResult(object):
    """
    Attributes:
     - status
     - states
     - roundNum

    """


    def __init__(self, status=None, states=None, roundNum=None,):
        self.status = status
        self.states = states
        self.roundNum = roundNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.states = {}
                    (_ktype66, _vtype67, _size65) = iprot.readMapBegin()
                    for _i69 in range(_size65):
                        _key70 = iprot.readI64()
                        _val71 = iprot.readI32()
                        self.states[_key70] = _val71
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.roundNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionsStateGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.states is not None:
            oprot.writeFieldBegin('states', TType.MAP, 2)
            oprot.writeMapBegin(TType.I64, TType.I32, len(self.states))
            for kiter72, viter73 in self.states.items():
                oprot.writeI64(kiter72)
                oprot.writeI32(viter73)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.roundNum is not None:
            oprot.writeFieldBegin('roundNum', TType.I32, 3)
            oprot.writeI32(self.roundNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartMethodParamsGetResult(object):
    """
    Attributes:
     - status
     - method
     - params

    """


    def __init__(self, status=None, method=None, params=None,):
        self.status = status
        self.method = method
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype77, _size74) = iprot.readListBegin()
                    for _i78 in range(_size74):
                        _elem79 = general.ttypes.Variant()
                        _elem79.read(iprot)
                        self.params.append(_elem79)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartMethodParamsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 2)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter80 in self.params:
                iter80.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContractAllMethodsGetResult(object):
    """
    Attributes:
     - code
     - message
     - methods

    """


    def __init__(self, code=None, message=None, methods=None,):
        self.code = code
        self.message = message
        self.methods = methods

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.methods = []
                    (_etype84, _size81) = iprot.readListBegin()
                    for _i85 in range(_size81):
                        _elem86 = general.ttypes.MethodDescription()
                        _elem86.read(iprot)
                        self.methods.append(_elem86)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContractAllMethodsGetResult')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 1)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.methods is not None:
            oprot.writeFieldBegin('methods', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.methods))
            for iter87 in self.methods:
                iter87.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractMethodArgument(object):
    """
    Attributes:
     - type
     - name

    """


    def __init__(self, type=None, name=None,):
        self.type = type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractMethodArgument')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractMethod(object):
    """
    Attributes:
     - returnType
     - name
     - arguments

    """


    def __init__(self, returnType=None, name=None, arguments=None,):
        self.returnType = returnType
        self.name = name
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.returnType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype91, _size88) = iprot.readListBegin()
                    for _i92 in range(_size88):
                        _elem93 = SmartContractMethodArgument()
                        _elem93.read(iprot)
                        self.arguments.append(_elem93)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractMethod')
        if self.returnType is not None:
            oprot.writeFieldBegin('returnType', TType.STRING, 1)
            oprot.writeString(self.returnType.encode('utf-8') if sys.version_info[0] == 2 else self.returnType)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.arguments))
            for iter94 in self.arguments:
                iter94.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractDataResult(object):
    """
    Attributes:
     - status
     - methods
     - variables

    """


    def __init__(self, status=None, methods=None, variables=None,):
        self.status = status
        self.methods = methods
        self.variables = variables

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.methods = []
                    (_etype98, _size95) = iprot.readListBegin()
                    for _i99 in range(_size95):
                        _elem100 = SmartContractMethod()
                        _elem100.read(iprot)
                        self.methods.append(_elem100)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.variables = {}
                    (_ktype102, _vtype103, _size101) = iprot.readMapBegin()
                    for _i105 in range(_size101):
                        _key106 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val107 = general.ttypes.Variant()
                        _val107.read(iprot)
                        self.variables[_key106] = _val107
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractDataResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.methods is not None:
            oprot.writeFieldBegin('methods', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.methods))
            for iter108 in self.methods:
                iter108.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.variables is not None:
            oprot.writeFieldBegin('variables', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.variables))
            for kiter109, viter110 in self.variables.items():
                oprot.writeString(kiter109.encode('utf-8') if sys.version_info[0] == 2 else kiter109)
                viter110.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractCompileResult(object):
    """
    Attributes:
     - status
     - byteCodeObjects
     - ts

    """


    def __init__(self, status=None, byteCodeObjects=None, ts=None,):
        self.status = status
        self.byteCodeObjects = byteCodeObjects
        self.ts = ts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = general.ttypes.ByteCodeObject()
                        _elem116.read(iprot)
                        self.byteCodeObjects.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.ts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractCompileResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter117 in self.byteCodeObjects:
                iter117.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I32, 3)
            oprot.writeI32(self.ts)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenInfo(object):
    """
    Attributes:
     - address
     - code
     - name
     - totalSupply
     - owner
     - transfersCount
     - transactionsCount
     - holdersCount
     - standart

    """


    def __init__(self, address=None, code=None, name=None, totalSupply=None, owner=None, transfersCount=None, transactionsCount=None, holdersCount=None, standart=None,):
        self.address = address
        self.code = code
        self.name = name
        self.totalSupply = totalSupply
        self.owner = owner
        self.transfersCount = transfersCount
        self.transactionsCount = transactionsCount
        self.holdersCount = holdersCount
        self.standart = standart

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.totalSupply = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.owner = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transfersCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.holdersCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.standart = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenInfo')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.totalSupply is not None:
            oprot.writeFieldBegin('totalSupply', TType.STRING, 4)
            oprot.writeString(self.totalSupply.encode('utf-8') if sys.version_info[0] == 2 else self.totalSupply)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 5)
            oprot.writeBinary(self.owner)
            oprot.writeFieldEnd()
        if self.transfersCount is not None:
            oprot.writeFieldBegin('transfersCount', TType.I32, 6)
            oprot.writeI32(self.transfersCount)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 7)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.holdersCount is not None:
            oprot.writeFieldBegin('holdersCount', TType.I32, 8)
            oprot.writeI32(self.holdersCount)
            oprot.writeFieldEnd()
        if self.standart is not None:
            oprot.writeFieldBegin('standart', TType.I32, 9)
            oprot.writeI32(self.standart)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransaction(object):
    """
    Attributes:
     - token
     - transaction
     - time
     - initiator
     - method
     - params

    """


    def __init__(self, token=None, transaction=None, time=None, initiator=None, method=None, params=None,):
        self.token = token
        self.transaction = transaction
        self.time = time
        self.initiator = initiator
        self.method = method
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.transaction = TransactionId()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.initiator = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype121, _size118) = iprot.readListBegin()
                    for _i122 in range(_size118):
                        _elem123 = general.ttypes.Variant()
                        _elem123.read(iprot)
                        self.params.append(_elem123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransaction')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 2)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 3)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.initiator is not None:
            oprot.writeFieldBegin('initiator', TType.STRING, 4)
            oprot.writeBinary(self.initiator)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 5)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter124 in self.params:
                iter124.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenHolder(object):
    """
    Attributes:
     - holder
     - token
     - balance
     - transfersCount

    """


    def __init__(self, holder=None, token=None, balance=None, transfersCount=None,):
        self.holder = holder
        self.token = token
        self.balance = balance
        self.transfersCount = transfersCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.holder = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.balance = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.transfersCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenHolder')
        if self.holder is not None:
            oprot.writeFieldBegin('holder', TType.STRING, 1)
            oprot.writeBinary(self.holder)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRING, 3)
            oprot.writeString(self.balance.encode('utf-8') if sys.version_info[0] == 2 else self.balance)
            oprot.writeFieldEnd()
        if self.transfersCount is not None:
            oprot.writeFieldBegin('transfersCount', TType.I32, 4)
            oprot.writeI32(self.transfersCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenBalance(object):
    """
    Attributes:
     - token
     - code
     - name
     - balance

    """


    def __init__(self, token=None, code=None, name=None, balance=None,):
        self.token = token
        self.code = code
        self.name = name
        self.balance = balance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.balance = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenBalance')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRING, 4)
            oprot.writeString(self.balance.encode('utf-8') if sys.version_info[0] == 2 else self.balance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenBalancesResult(object):
    """
    Attributes:
     - status
     - balances

    """


    def __init__(self, status=None, balances=None,):
        self.status = status
        self.balances = balances

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.balances = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = TokenBalance()
                        _elem130.read(iprot)
                        self.balances.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenBalancesResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.balances is not None:
            oprot.writeFieldBegin('balances', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.balances))
            for iter131 in self.balances:
                iter131.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransfer(object):
    """
    Attributes:
     - token
     - code
     - sender
     - receiver
     - amount
     - initiator
     - transaction
     - time

    """


    def __init__(self, token=None, code=None, sender=None, receiver=None, amount=None, initiator=None, transaction=None, time=None,):
        self.token = token
        self.code = code
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.initiator = initiator
        self.transaction = transaction
        self.time = time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sender = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.receiver = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.amount = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.initiator = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.transaction = TransactionId()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransfer')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.sender is not None:
            oprot.writeFieldBegin('sender', TType.STRING, 3)
            oprot.writeBinary(self.sender)
            oprot.writeFieldEnd()
        if self.receiver is not None:
            oprot.writeFieldBegin('receiver', TType.STRING, 4)
            oprot.writeBinary(self.receiver)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRING, 5)
            oprot.writeString(self.amount.encode('utf-8') if sys.version_info[0] == 2 else self.amount)
            oprot.writeFieldEnd()
        if self.initiator is not None:
            oprot.writeFieldBegin('initiator', TType.STRING, 6)
            oprot.writeBinary(self.initiator)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 7)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 8)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransfersResult(object):
    """
    Attributes:
     - status
     - count
     - transfers

    """


    def __init__(self, status=None, count=None, transfers=None,):
        self.status = status
        self.count = count
        self.transfers = transfers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transfers = []
                    (_etype135, _size132) = iprot.readListBegin()
                    for _i136 in range(_size132):
                        _elem137 = TokenTransfer()
                        _elem137.read(iprot)
                        self.transfers.append(_elem137)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransfersResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.transfers is not None:
            oprot.writeFieldBegin('transfers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transfers))
            for iter138 in self.transfers:
                iter138.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransactionsResult(object):
    """
    Attributes:
     - status
     - count
     - transactions

    """


    def __init__(self, status=None, count=None, transactions=None,):
        self.status = status
        self.count = count
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype142, _size139) = iprot.readListBegin()
                    for _i143 in range(_size139):
                        _elem144 = TokenTransaction()
                        _elem144.read(iprot)
                        self.transactions.append(_elem144)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransactionsResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter145 in self.transactions:
                iter145.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenInfoResult(object):
    """
    Attributes:
     - status
     - token

    """


    def __init__(self, status=None, token=None,):
        self.status = status
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.token = TokenInfo()
                    self.token.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenInfoResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRUCT, 2)
            self.token.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenHoldersResult(object):
    """
    Attributes:
     - status
     - count
     - holders

    """


    def __init__(self, status=None, count=None, holders=None,):
        self.status = status
        self.count = count
        self.holders = holders

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.holders = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = TokenHolder()
                        _elem151.read(iprot)
                        self.holders.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenHoldersResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.holders is not None:
            oprot.writeFieldBegin('holders', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.holders))
            for iter152 in self.holders:
                iter152.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokensListResult(object):
    """
    Attributes:
     - status
     - count
     - tokens

    """


    def __init__(self, status=None, count=None, tokens=None,):
        self.status = status
        self.count = count
        self.tokens = tokens

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tokens = []
                    (_etype156, _size153) = iprot.readListBegin()
                    for _i157 in range(_size153):
                        _elem158 = TokenInfo()
                        _elem158.read(iprot)
                        self.tokens.append(_elem158)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokensListResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.tokens is not None:
            oprot.writeFieldBegin('tokens', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.tokens))
            for iter159 in self.tokens:
                iter159.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletInfo(object):
    """
    Attributes:
     - address
     - balance
     - transactionsNumber
     - firstTransactionTime

    """


    def __init__(self, address=None, balance=None, transactionsNumber=None, firstTransactionTime=None,):
        self.address = address
        self.balance = balance
        self.transactionsNumber = transactionsNumber
        self.firstTransactionTime = firstTransactionTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.transactionsNumber = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.firstTransactionTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletInfo')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.transactionsNumber is not None:
            oprot.writeFieldBegin('transactionsNumber', TType.I64, 3)
            oprot.writeI64(self.transactionsNumber)
            oprot.writeFieldEnd()
        if self.firstTransactionTime is not None:
            oprot.writeFieldBegin('firstTransactionTime', TType.I64, 4)
            oprot.writeI64(self.firstTransactionTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletsGetResult(object):
    """
    Attributes:
     - status
     - count
     - wallets

    """


    def __init__(self, status=None, count=None, wallets=None,):
        self.status = status
        self.count = count
        self.wallets = wallets

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.wallets = []
                    (_etype163, _size160) = iprot.readListBegin()
                    for _i164 in range(_size160):
                        _elem165 = WalletInfo()
                        _elem165.read(iprot)
                        self.wallets.append(_elem165)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.wallets is not None:
            oprot.writeFieldBegin('wallets', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.wallets))
            for iter166 in self.wallets:
                iter166.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrustedInfo(object):
    """
    Attributes:
     - address
     - timesWriter
     - timesTrusted
     - feeCollected

    """


    def __init__(self, address=None, timesWriter=None, timesTrusted=None, feeCollected=None,):
        self.address = address
        self.timesWriter = timesWriter
        self.timesTrusted = timesTrusted
        self.feeCollected = feeCollected

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timesWriter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timesTrusted = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.feeCollected = Amount()
                    self.feeCollected.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrustedInfo')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.timesWriter is not None:
            oprot.writeFieldBegin('timesWriter', TType.I32, 2)
            oprot.writeI32(self.timesWriter)
            oprot.writeFieldEnd()
        if self.timesTrusted is not None:
            oprot.writeFieldBegin('timesTrusted', TType.I32, 3)
            oprot.writeI32(self.timesTrusted)
            oprot.writeFieldEnd()
        if self.feeCollected is not None:
            oprot.writeFieldBegin('feeCollected', TType.STRUCT, 4)
            self.feeCollected.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrustedGetResult(object):
    """
    Attributes:
     - status
     - pages
     - writers

    """


    def __init__(self, status=None, pages=None, writers=None,):
        self.status = status
        self.pages = pages
        self.writers = writers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pages = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.writers = []
                    (_etype170, _size167) = iprot.readListBegin()
                    for _i171 in range(_size167):
                        _elem172 = TrustedInfo()
                        _elem172.read(iprot)
                        self.writers.append(_elem172)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrustedGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.pages is not None:
            oprot.writeFieldBegin('pages', TType.I32, 2)
            oprot.writeI32(self.pages)
            oprot.writeFieldEnd()
        if self.writers is not None:
            oprot.writeFieldBegin('writers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.writers))
            for iter173 in self.writers:
                iter173.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncStateResult(object):
    """
    Attributes:
     - status
     - currRound
     - lastBlock

    """


    def __init__(self, status=None, currRound=None, lastBlock=None,):
        self.status = status
        self.currRound = currRound
        self.lastBlock = lastBlock

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.currRound = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastBlock = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncStateResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.currRound is not None:
            oprot.writeFieldBegin('currRound', TType.I64, 2)
            oprot.writeI64(self.currRound)
            oprot.writeFieldEnd()
        if self.lastBlock is not None:
            oprot.writeFieldBegin('lastBlock', TType.I64, 3)
            oprot.writeI64(self.lastBlock)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Amount)
Amount.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'integral', None, 0, ),  # 1
    (2, TType.I64, 'fraction', None, 0, ),  # 2
)
all_structs.append(AmountCommission)
AmountCommission.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'commission', None, 0, ),  # 1
)
all_structs.append(CumulativeAmount)
CumulativeAmount.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'integral', None, 0, ),  # 1
    (2, TType.I64, 'fraction', None, 0, ),  # 2
)
all_structs.append(SmartContractDeploy)
SmartContractDeploy.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceCode', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 2
    (3, TType.STRING, 'hashState', 'UTF8', None, ),  # 3
    (4, TType.I32, 'tokenStandart', None, None, ),  # 4
)
all_structs.append(SmartContract)
SmartContract.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'deployer', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'smartContractDeploy', [SmartContractDeploy, None], None, ),  # 3
    (4, TType.STRING, 'objectState', 'BINARY', None, ),  # 4
    (5, TType.I64, 'createTime', None, None, ),  # 5
    (6, TType.I32, 'transactionsCount', None, None, ),  # 6
)
all_structs.append(SmartContractInvocation)
SmartContractInvocation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'method', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'params', (TType.STRUCT, [general.ttypes.Variant, None], False), None, ),  # 2
    (3, TType.BOOL, 'forgetNewState', None, None, ),  # 3
    (4, TType.STRUCT, 'smartContractDeploy', [SmartContractDeploy, None], None, ),  # 4
)
all_structs.append(TransactionId)
TransactionId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolHash', 'BINARY', None, ),  # 1
    (2, TType.I32, 'index', None, None, ),  # 2
)
all_structs.append(Transaction)
Transaction.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'source', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'target', 'BINARY', None, ),  # 3
    (4, TType.STRUCT, 'amount', [Amount, None], None, ),  # 4
    (5, TType.STRUCT, 'balance', [Amount, None], None, ),  # 5
    (6, TType.BYTE, 'currency', None, None, ),  # 6
    (7, TType.STRING, 'signature', 'BINARY', None, ),  # 7
    (8, TType.STRUCT, 'smartContract', [SmartContractInvocation, None], None, ),  # 8
    (9, TType.STRUCT, 'fee', [AmountCommission, None], None, ),  # 9
    (10, TType.I64, 'timeCreation', None, None, ),  # 10
    (11, TType.STRING, 'userFields', 'BINARY', None, ),  # 11
)
all_structs.append(SealedTransaction)
SealedTransaction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'id', [TransactionId, None], None, ),  # 1
    (2, TType.STRUCT, 'trxn', [Transaction, None], None, ),  # 2
)
all_structs.append(Pool)
Pool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hash', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'prevHash', 'BINARY', None, ),  # 2
    (3, TType.I64, 'time', None, None, ),  # 3
    (4, TType.I32, 'transactionsCount', None, None, ),  # 4
    (5, TType.I64, 'poolNumber', None, None, ),  # 5
    (6, TType.STRING, 'writer', 'BINARY', None, ),  # 6
    (7, TType.STRUCT, 'totalFee', [Amount, None], None, ),  # 7
)
all_structs.append(WalletData)
WalletData.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'walletId', None, None, ),  # 1
    (2, TType.STRUCT, 'balance', [Amount, None], None, ),  # 2
    (3, TType.I64, 'lastTransactionId', None, None, ),  # 3
)
all_structs.append(PeriodStats)
PeriodStats.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'periodDuration', None, None, ),  # 1
    (2, TType.I32, 'poolsCount', None, None, ),  # 2
    (3, TType.I32, 'transactionsCount', None, None, ),  # 3
    (4, TType.MAP, 'balancePerCurrency', (TType.BYTE, None, TType.STRUCT, [CumulativeAmount, None], False), None, ),  # 4
    (5, TType.I32, 'smartContractsCount', None, None, ),  # 5
    (6, TType.I32, 'transactionsSmartCount', None, None, ),  # 6
)
all_structs.append(WalletDataGetResult)
WalletDataGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'walletData', [WalletData, None], None, ),  # 2
)
all_structs.append(WalletIdGetResult)
WalletIdGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'walletId', None, None, ),  # 2
)
all_structs.append(WalletTransactionsCountGetResult)
WalletTransactionsCountGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I64, 'lastTransactionInnerId', None, None, ),  # 2
)
all_structs.append(WalletBalanceGetResult)
WalletBalanceGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'balance', [Amount, None], None, ),  # 2
)
all_structs.append(TransactionGetResult)
TransactionGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'found', None, None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
    (4, TType.I32, 'roundNum', None, None, ),  # 4
    (5, TType.STRUCT, 'transaction', [SealedTransaction, None], None, ),  # 5
)
all_structs.append(TrxnsCountFromAddr)
TrxnsCountFromAddr.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'sendCount', None, None, ),  # 1
    (2, TType.I64, 'recvCount', None, None, ),  # 2
)
all_structs.append(TransactionsGetResult)
TransactionsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.I32, 'total_trxns_count', None, None, ),  # 3
    (4, TType.LIST, 'transactions', (TType.STRUCT, [SealedTransaction, None], False), None, ),  # 4
    (5, TType.STRUCT, 'trxns_count', [TrxnsCountFromAddr, None], None, ),  # 5
)
all_structs.append(TransactionFlowResult)
TransactionFlowResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'smart_contract_result', [general.ttypes.Variant, None], None, ),  # 2
    (3, TType.I32, 'roundNum', None, None, ),  # 3
)
all_structs.append(PoolListGetResult)
PoolListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
    (4, TType.LIST, 'pools', (TType.STRUCT, [Pool, None], False), None, ),  # 4
)
all_structs.append(PoolInfoGetResult)
PoolInfoGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'isFound', None, None, ),  # 2
    (3, TType.STRUCT, 'pool', [Pool, None], None, ),  # 3
)
all_structs.append(PoolTransactionsGetResult)
PoolTransactionsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'transactions', (TType.STRUCT, [SealedTransaction, None], False), None, ),  # 2
)
all_structs.append(StatsGetResult)
StatsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'stats', (TType.STRUCT, [PeriodStats, None], False), None, ),  # 2
)
all_structs.append(SmartContractGetResult)
SmartContractGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'smartContract', [SmartContract, None], None, ),  # 2
)
all_structs.append(SmartContractAddressesListGetResult)
SmartContractAddressesListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'addressesList', (TType.STRING, 'BINARY', False), None, ),  # 2
)
all_structs.append(SmartContractsListGetResult)
SmartContractsListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'smartContractsList', (TType.STRUCT, [SmartContract, None], False), None, ),  # 3
)
all_structs.append(TransactionsStateGetResult)
TransactionsStateGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.MAP, 'states', (TType.I64, None, TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'roundNum', None, None, ),  # 3
)
all_structs.append(SmartMethodParamsGetResult)
SmartMethodParamsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRING, 'method', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'params', (TType.STRUCT, [general.ttypes.Variant, None], False), None, ),  # 3
)
all_structs.append(ContractAllMethodsGetResult)
ContractAllMethodsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'methods', (TType.STRUCT, [general.ttypes.MethodDescription, None], False), None, ),  # 3
)
all_structs.append(SmartContractMethodArgument)
SmartContractMethodArgument.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(SmartContractMethod)
SmartContractMethod.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'returnType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'arguments', (TType.STRUCT, [SmartContractMethodArgument, None], False), None, ),  # 3
)
all_structs.append(SmartContractDataResult)
SmartContractDataResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'methods', (TType.STRUCT, [SmartContractMethod, None], False), None, ),  # 2
    (3, TType.MAP, 'variables', (TType.STRING, 'UTF8', TType.STRUCT, [general.ttypes.Variant, None], False), None, ),  # 3
)
all_structs.append(SmartContractCompileResult)
SmartContractCompileResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 2
    (3, TType.I32, 'ts', None, None, ),  # 3
)
all_structs.append(TokenInfo)
TokenInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'totalSupply', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'owner', 'BINARY', None, ),  # 5
    (6, TType.I32, 'transfersCount', None, None, ),  # 6
    (7, TType.I32, 'transactionsCount', None, None, ),  # 7
    (8, TType.I32, 'holdersCount', None, None, ),  # 8
    (9, TType.I32, 'standart', None, None, ),  # 9
)
all_structs.append(TokenTransaction)
TokenTransaction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'transaction', [TransactionId, None], None, ),  # 2
    (3, TType.I64, 'time', None, None, ),  # 3
    (4, TType.STRING, 'initiator', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'method', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'params', (TType.STRUCT, [general.ttypes.Variant, None], False), None, ),  # 6
)
all_structs.append(TokenHolder)
TokenHolder.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'holder', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'token', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'balance', 'UTF8', None, ),  # 3
    (4, TType.I32, 'transfersCount', None, None, ),  # 4
)
all_structs.append(TokenBalance)
TokenBalance.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'balance', 'UTF8', None, ),  # 4
)
all_structs.append(TokenBalancesResult)
TokenBalancesResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'balances', (TType.STRUCT, [TokenBalance, None], False), None, ),  # 2
)
all_structs.append(TokenTransfer)
TokenTransfer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sender', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'receiver', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'amount', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'initiator', 'BINARY', None, ),  # 6
    (7, TType.STRUCT, 'transaction', [TransactionId, None], None, ),  # 7
    (8, TType.I64, 'time', None, None, ),  # 8
)
all_structs.append(TokenTransfersResult)
TokenTransfersResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'transfers', (TType.STRUCT, [TokenTransfer, None], False), None, ),  # 3
)
all_structs.append(TokenTransactionsResult)
TokenTransactionsResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'transactions', (TType.STRUCT, [TokenTransaction, None], False), None, ),  # 3
)
all_structs.append(TokenInfoResult)
TokenInfoResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'token', [TokenInfo, None], None, ),  # 2
)
all_structs.append(TokenHoldersResult)
TokenHoldersResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'holders', (TType.STRUCT, [TokenHolder, None], False), None, ),  # 3
)
all_structs.append(TokensListResult)
TokensListResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'tokens', (TType.STRUCT, [TokenInfo, None], False), None, ),  # 3
)
all_structs.append(WalletInfo)
WalletInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'balance', [Amount, None], None, ),  # 2
    (3, TType.I64, 'transactionsNumber', None, None, ),  # 3
    (4, TType.I64, 'firstTransactionTime', None, None, ),  # 4
)
all_structs.append(WalletsGetResult)
WalletsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'wallets', (TType.STRUCT, [WalletInfo, None], False), None, ),  # 3
)
all_structs.append(TrustedInfo)
TrustedInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.I32, 'timesWriter', None, None, ),  # 2
    (3, TType.I32, 'timesTrusted', None, None, ),  # 3
    (4, TType.STRUCT, 'feeCollected', [Amount, None], None, ),  # 4
)
all_structs.append(TrustedGetResult)
TrustedGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I32, 'pages', None, None, ),  # 2
    (3, TType.LIST, 'writers', (TType.STRUCT, [TrustedInfo, None], False), None, ),  # 3
)
all_structs.append(SyncStateResult)
SyncStateResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.I64, 'currRound', None, None, ),  # 2
    (3, TType.I64, 'lastBlock', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
