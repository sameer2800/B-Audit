#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def executeByteCode(self, address, byteCodeObjects, contractState, method, params, executionTime):
        """
        Parameters:
         - address
         - byteCodeObjects
         - contractState
         - method
         - params
         - executionTime

        """
        pass

    def executeByteCodeMultiple(self, address, byteCodeObjects, contractState, method, params, executionTime):
        """
        Parameters:
         - address
         - byteCodeObjects
         - contractState
         - method
         - params
         - executionTime

        """
        pass

    def getContractMethods(self, byteCodeObjects):
        """
        Parameters:
         - byteCodeObjects

        """
        pass

    def getContractVariables(self, byteCodeObjects, contractState):
        """
        Parameters:
         - byteCodeObjects
         - contractState

        """
        pass

    def compileSourceCode(self, sourceCode):
        """
        Parameters:
         - sourceCode

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def executeByteCode(self, address, byteCodeObjects, contractState, method, params, executionTime):
        """
        Parameters:
         - address
         - byteCodeObjects
         - contractState
         - method
         - params
         - executionTime

        """
        self.send_executeByteCode(address, byteCodeObjects, contractState, method, params, executionTime)
        return self.recv_executeByteCode()

    def send_executeByteCode(self, address, byteCodeObjects, contractState, method, params, executionTime):
        self._oprot.writeMessageBegin('executeByteCode', TMessageType.CALL, self._seqid)
        args = executeByteCode_args()
        args.address = address
        args.byteCodeObjects = byteCodeObjects
        args.contractState = contractState
        args.method = method
        args.params = params
        args.executionTime = executionTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_executeByteCode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = executeByteCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "executeByteCode failed: unknown result")

    def executeByteCodeMultiple(self, address, byteCodeObjects, contractState, method, params, executionTime):
        """
        Parameters:
         - address
         - byteCodeObjects
         - contractState
         - method
         - params
         - executionTime

        """
        self.send_executeByteCodeMultiple(address, byteCodeObjects, contractState, method, params, executionTime)
        return self.recv_executeByteCodeMultiple()

    def send_executeByteCodeMultiple(self, address, byteCodeObjects, contractState, method, params, executionTime):
        self._oprot.writeMessageBegin('executeByteCodeMultiple', TMessageType.CALL, self._seqid)
        args = executeByteCodeMultiple_args()
        args.address = address
        args.byteCodeObjects = byteCodeObjects
        args.contractState = contractState
        args.method = method
        args.params = params
        args.executionTime = executionTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_executeByteCodeMultiple(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = executeByteCodeMultiple_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "executeByteCodeMultiple failed: unknown result")

    def getContractMethods(self, byteCodeObjects):
        """
        Parameters:
         - byteCodeObjects

        """
        self.send_getContractMethods(byteCodeObjects)
        return self.recv_getContractMethods()

    def send_getContractMethods(self, byteCodeObjects):
        self._oprot.writeMessageBegin('getContractMethods', TMessageType.CALL, self._seqid)
        args = getContractMethods_args()
        args.byteCodeObjects = byteCodeObjects
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getContractMethods(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getContractMethods_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getContractMethods failed: unknown result")

    def getContractVariables(self, byteCodeObjects, contractState):
        """
        Parameters:
         - byteCodeObjects
         - contractState

        """
        self.send_getContractVariables(byteCodeObjects, contractState)
        return self.recv_getContractVariables()

    def send_getContractVariables(self, byteCodeObjects, contractState):
        self._oprot.writeMessageBegin('getContractVariables', TMessageType.CALL, self._seqid)
        args = getContractVariables_args()
        args.byteCodeObjects = byteCodeObjects
        args.contractState = contractState
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getContractVariables(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getContractVariables_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getContractVariables failed: unknown result")

    def compileSourceCode(self, sourceCode):
        """
        Parameters:
         - sourceCode

        """
        self.send_compileSourceCode(sourceCode)
        return self.recv_compileSourceCode()

    def send_compileSourceCode(self, sourceCode):
        self._oprot.writeMessageBegin('compileSourceCode', TMessageType.CALL, self._seqid)
        args = compileSourceCode_args()
        args.sourceCode = sourceCode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_compileSourceCode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = compileSourceCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "compileSourceCode failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["executeByteCode"] = Processor.process_executeByteCode
        self._processMap["executeByteCodeMultiple"] = Processor.process_executeByteCodeMultiple
        self._processMap["getContractMethods"] = Processor.process_getContractMethods
        self._processMap["getContractVariables"] = Processor.process_getContractVariables
        self._processMap["compileSourceCode"] = Processor.process_compileSourceCode

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_executeByteCode(self, seqid, iprot, oprot):
        args = executeByteCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = executeByteCode_result()
        try:
            result.success = self._handler.executeByteCode(args.address, args.byteCodeObjects, args.contractState, args.method, args.params, args.executionTime)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("executeByteCode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_executeByteCodeMultiple(self, seqid, iprot, oprot):
        args = executeByteCodeMultiple_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = executeByteCodeMultiple_result()
        try:
            result.success = self._handler.executeByteCodeMultiple(args.address, args.byteCodeObjects, args.contractState, args.method, args.params, args.executionTime)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("executeByteCodeMultiple", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getContractMethods(self, seqid, iprot, oprot):
        args = getContractMethods_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getContractMethods_result()
        try:
            result.success = self._handler.getContractMethods(args.byteCodeObjects)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getContractMethods", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getContractVariables(self, seqid, iprot, oprot):
        args = getContractVariables_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getContractVariables_result()
        try:
            result.success = self._handler.getContractVariables(args.byteCodeObjects, args.contractState)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getContractVariables", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_compileSourceCode(self, seqid, iprot, oprot):
        args = compileSourceCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = compileSourceCode_result()
        try:
            result.success = self._handler.compileSourceCode(args.sourceCode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("compileSourceCode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class executeByteCode_args(object):
    """
    Attributes:
     - address
     - byteCodeObjects
     - contractState
     - method
     - params
     - executionTime

    """


    def __init__(self, address=None, byteCodeObjects=None, contractState=None, method=None, params=None, executionTime=None,):
        self.address = address
        self.byteCodeObjects = byteCodeObjects
        self.contractState = contractState
        self.method = method
        self.params = params
        self.executionTime = executionTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = general.ttypes.ByteCodeObject()
                        _elem35.read(iprot)
                        self.byteCodeObjects.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.contractState = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = general.ttypes.Variant()
                        _elem41.read(iprot)
                        self.params.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.executionTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeByteCode_args')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter42 in self.byteCodeObjects:
                iter42.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contractState is not None:
            oprot.writeFieldBegin('contractState', TType.STRING, 3)
            oprot.writeBinary(self.contractState)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 4)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter43 in self.params:
                iter43.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.executionTime is not None:
            oprot.writeFieldBegin('executionTime', TType.I64, 6)
            oprot.writeI64(self.executionTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeByteCode_args)
executeByteCode_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 2
    (3, TType.STRING, 'contractState', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'method', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'params', (TType.STRUCT, [general.ttypes.Variant, None], False), None, ),  # 5
    (6, TType.I64, 'executionTime', None, None, ),  # 6
)


class executeByteCode_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ExecuteByteCodeResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeByteCode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeByteCode_result)
executeByteCode_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ExecuteByteCodeResult, None], None, ),  # 0
)


class executeByteCodeMultiple_args(object):
    """
    Attributes:
     - address
     - byteCodeObjects
     - contractState
     - method
     - params
     - executionTime

    """


    def __init__(self, address=None, byteCodeObjects=None, contractState=None, method=None, params=None, executionTime=None,):
        self.address = address
        self.byteCodeObjects = byteCodeObjects
        self.contractState = contractState
        self.method = method
        self.params = params
        self.executionTime = executionTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = general.ttypes.ByteCodeObject()
                        _elem49.read(iprot)
                        self.byteCodeObjects.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.contractState = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype53, _size50) = iprot.readListBegin()
                    for _i54 in range(_size50):
                        _elem55 = []
                        (_etype59, _size56) = iprot.readListBegin()
                        for _i60 in range(_size56):
                            _elem61 = general.ttypes.Variant()
                            _elem61.read(iprot)
                            _elem55.append(_elem61)
                        iprot.readListEnd()
                        self.params.append(_elem55)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.executionTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeByteCodeMultiple_args')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter62 in self.byteCodeObjects:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contractState is not None:
            oprot.writeFieldBegin('contractState', TType.STRING, 3)
            oprot.writeBinary(self.contractState)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 4)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 5)
            oprot.writeListBegin(TType.LIST, len(self.params))
            for iter63 in self.params:
                oprot.writeListBegin(TType.STRUCT, len(iter63))
                for iter64 in iter63:
                    iter64.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.executionTime is not None:
            oprot.writeFieldBegin('executionTime', TType.I64, 6)
            oprot.writeI64(self.executionTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeByteCodeMultiple_args)
executeByteCodeMultiple_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 2
    (3, TType.STRING, 'contractState', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'method', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'params', (TType.LIST, (TType.STRUCT, [general.ttypes.Variant, None], False), False), None, ),  # 5
    (6, TType.I64, 'executionTime', None, None, ),  # 6
)


class executeByteCodeMultiple_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ExecuteByteCodeMultipleResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeByteCodeMultiple_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeByteCodeMultiple_result)
executeByteCodeMultiple_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ExecuteByteCodeMultipleResult, None], None, ),  # 0
)


class getContractMethods_args(object):
    """
    Attributes:
     - byteCodeObjects

    """


    def __init__(self, byteCodeObjects=None,):
        self.byteCodeObjects = byteCodeObjects

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = general.ttypes.ByteCodeObject()
                        _elem70.read(iprot)
                        self.byteCodeObjects.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContractMethods_args')
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter71 in self.byteCodeObjects:
                iter71.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContractMethods_args)
getContractMethods_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 1
)


class getContractMethods_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetContractMethodsResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContractMethods_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContractMethods_result)
getContractMethods_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [GetContractMethodsResult, None], None, ),  # 0
)


class getContractVariables_args(object):
    """
    Attributes:
     - byteCodeObjects
     - contractState

    """


    def __init__(self, byteCodeObjects=None, contractState=None,):
        self.byteCodeObjects = byteCodeObjects
        self.contractState = contractState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = general.ttypes.ByteCodeObject()
                        _elem77.read(iprot)
                        self.byteCodeObjects.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.contractState = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContractVariables_args')
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter78 in self.byteCodeObjects:
                iter78.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contractState is not None:
            oprot.writeFieldBegin('contractState', TType.STRING, 2)
            oprot.writeBinary(self.contractState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContractVariables_args)
getContractVariables_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 1
    (2, TType.STRING, 'contractState', 'BINARY', None, ),  # 2
)


class getContractVariables_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetContractVariablesResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getContractVariables_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getContractVariables_result)
getContractVariables_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [GetContractVariablesResult, None], None, ),  # 0
)


class compileSourceCode_args(object):
    """
    Attributes:
     - sourceCode

    """


    def __init__(self, sourceCode=None,):
        self.sourceCode = sourceCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('compileSourceCode_args')
        if self.sourceCode is not None:
            oprot.writeFieldBegin('sourceCode', TType.STRING, 1)
            oprot.writeString(self.sourceCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(compileSourceCode_args)
compileSourceCode_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceCode', 'UTF8', None, ),  # 1
)


class compileSourceCode_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CompileSourceCodeResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('compileSourceCode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(compileSourceCode_result)
compileSourceCode_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CompileSourceCodeResult, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

